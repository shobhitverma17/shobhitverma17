#include <iostream>
using namespace std;

class rational
{
private:
    float num, denom;

public:
    rational()
    {
        num = 0;
        denom = 0;
    }

    rational(float a, float b)
    {
        num = a;

        denom = b;
    }

    void show();
    
    rational operator+(rational);
    rational operator-(rational);          // basic operators
    rational operator*(rational);
    rational operator/(rational);
    // basic operators implemented through friend functions
    friend rational operator+(rational, int);
    friend rational operator+(int, rational);

   
    friend void operator<<(ostream &, const rational);                     // output operators

    
    rational operator=(const rational &ob);
    rational operator+=(const rational &ob);
    rational operator*=(const rational &ob);              // assignment operators
    rational operator/=(const rational &ob);
    rational operator-=(const rational &ob);

    
    int operator==(rational);
    int operator!=(rational);
    int operator<=(rational);               // comparison operators
    int operator>=(rational);
    int operator<(rational);
    int operator>(rational);
};

void operator<<(ostream &p, const rational t)
{
    p << t.num << "\n__\n"
      << t.denom << endl;
}

rational rational::operator=(const rational &ob)               // assignment operators
{
    this->num = ob.num;
    this->denom = ob.denom;
    return *this;
}
rational rational::operator+=(const rational &ob)
{
    *this = *this + ob;
    return *this;
}
rational rational::operator-=(const rational &ob)
{
    *this = *this - ob;
    return *this;
}
rational rational::operator*=(const rational &ob)
{
    *this = *this * ob;
    return *this;
}
rational rational::operator/=(const rational &ob)
{
    *this = *this / ob;
    return *this;
}

// comparison operators
int rational::operator==(rational ob)
{
    return ((num == ob.num) && (denom == ob.denom)) ? 1 : 0;
}
int rational::operator>(rational ob)
{
    if (ob.denom == denom)
    {
        if (num > ob.num)
        {
            return 1;
        }
        else
            return 0;
    }
    else
    {
        if ((num * ob.denom) > (ob.num * denom))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}
int rational::operator<(rational ob)
{
    if (ob.denom == denom)
    {
        if (num < ob.num)
        {
            return 1;
        }
        else
            return 0;
    }
    else
    {
        if ((num * ob.denom) < (ob.num * denom))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}
int rational::operator>=(rational ob)
{
    if((num == ob.num) && (denom == ob.denom))
        return 1;
    if (ob.denom == denom)
    {
        if (num > ob.num)
        {
            return 1;
        }
        else
            return 0;
    }
    else
    {
        if ((num * ob.denom) > (ob.num * denom))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}
int rational::operator<=(rational ob)
{
    if((num == ob.num) && (denom == ob.denom))
        return 1;
    if (ob.denom == denom)
    {
        if (num < ob.num)
        {
            return 1;
        }
        else
            return 0;
    }
    else
    {
        if ((num * ob.denom) < (ob.num * denom))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
}
int rational::operator!=(rational ob)
{
    return ((num == ob.num) && (denom == ob.denom)) ? 0 : 1;
}

// basic operators with friend functions
rational operator+(rational ob, int a)
{
    rational result;
    result.denom = ob.denom;
    result.num = a * ob.denom + ob.num;
    return result;
}
rational operator+(int a, rational ob)
{
    rational result;
    result.denom = ob.denom;
    result.num = a * ob.denom + ob.num;
    return result;
}
// basic operators
rational rational::operator+(rational ob1)
{
    rational result;
    if (ob1.denom == denom)
    {
        result.denom = denom;
        result.num = num + ob1.num;
    }
    else
    {
        result.num = (num * ob1.denom) + (denom * ob1.num);
        result.denom = (denom * ob1.denom);
    }
    return result;
}

rational rational::operator-(rational ob1)
{
    rational result;
    if (ob1.denom == denom)
    {
        result.denom = denom;
        result.num = num - ob1.num;
    }
    else
    {
        result.num = (num * ob1.denom) - (denom * ob1.num);
        result.denom = (denom * ob1.denom);
    }
    return result;
}
rational rational::operator*(rational ob1)
{
    rational result;
    result.num = num * ob1.num;
    result.denom = denom * ob1.denom;
    return result;
}
rational rational::operator/(rational ob1)
{
    rational result;
    result.num = num * ob1.denom;
    result.denom = denom * ob1.num;
    return result;
}
void rational::show()
{
    cout << num << "\n__\n"
         << denom << endl;
}

int main()
{
    int p, q, r, s;
    cout << "Enter p and q :";
    cin >> p >> q;
    rational a(p, q);
    cout << "Enter p and q :";
    cin >> r >> s;
    rational b(r, s);

    cout << "friend function through operator overloading:" << endl;
    rational fsum = 4 + a;
    cout << fsum;
    rational fsum2 = a + 5;
    cout << fsum2;
    cout << " addition and assignment operator on the first object:\n";
    a += b;
    cout << a;
    cout << "Verifying the comparison operator:" << endl;
    if (a == b)
    {
        cout << "They are equal" << endl;
    }
    if (a != b)
    {
        cout << "They are not equal" << endl;
    }
    if (a > b)
    {
        cout << " first rational n0. is greater than the second rational number." << endl;
    }
    if (a < b)
    {
        cout << " first rational no is smaller than the second rational number." << endl;
    }
    

    return 0;
}
